# This workflow will install Python dependencies,
# run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
  pull_request:
    types: [opened, synchronize]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    container:
      image: ursamajorlab/impish-python:${{ matrix.python_version }}
    strategy:
      matrix:
        python_version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
        # In all these caching steps we introduce a CACHE_VERSION secret
        # in the key which is a workaround to the fact that
        # it's not possible to manually invalidate cache as of Dec 2021.
        # See issue https://github.com/actions/cache/issues/2 and StackOverflow
        # https://stackoverflow.com/questions/63521430/clear-cache-in-github-actions
      - name: Caching Poetry
        uses: actions/cache@v3
        id: poetry-cache
        with:
          path: ~/.local
          key: ${{ secrets.CACHE_VERSION }}-poetry-${{ runner.os }}-${{ matrix.python_version }}
      - name: Install poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: curl -sSL https://install.python-poetry.org/ | python3 -
      - name: Add Poetry to PATH
        run: echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: dependency-cache
        uses: actions/cache@v3
        id: dependency-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ secrets.CACHE_VERSION }}-venv-${{ runner.os }}-${{ matrix.python_version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.dependency-cache.outputs.cache-hit == 'true'
        run: poetry run pip --version
      - name: Install Dependencies
        run: poetry install
      - name: Lint with flake8 and Pylint
        run: |
          poetry run flake8
          poetry run pylint_runner
      - name: Test with pytest
        run: poetry run pytest --cov=src/ --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@v3
      - name: Build package and publish dry-run to test PyPI
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry build
          poetry publish --dry-run -r test-pypi -u __token__ -p secret_pypi_token
